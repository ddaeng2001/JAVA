package Ch05Inheritance; //업다운캐스팅 내용이 어렵다기 보다는 자주 사용되기에 중요함!★★★★★

//부모 클래스
class Super{
	int n1;
}
//자식 클래스
class Sub extends Super{
	int n2;
}

public class C06UpDownCastingMain {
	public static void main(String[] args) {

		//NoCasting(형변환 없음/ 자료형 일치)
		Super ob1 = new Super();
		ob1.n1 = 10;
		Sub ob2 = new Sub();
		ob2.n1 = 10;
		ob2.n2 = 20;
		
		//UpCasting(상위클래스 참조변수 = 하위클래스형 객체)(자동형변환)
		//자동형변환이 일어나는 이유 : 상위클래스로 연결하면 메모리 범위가 좁을 수 밖에 없음 -> 다른 메모리 영역을 침범할 가능성 x
		//메모리 영역을 침범할 우려가 없기 때문에
		
		//Upcasting을 사용하는 이유
		//1.상속관계에 있는 모든 하위 클래스들을 연결하기 위함
		//2.★★상위클래스에서 선언해놓은 함수를 하위 클래스에서 재정의된 상태라면 UpCasting된 상태에서는 재정의된 함수에 접근이 가능함★★ - C08예제참고
		
		//상속관계에 있는 상속클래스 참조변수로 어떠한 하위 클래스들이든지 연결할 수 있음
		//상속관계에 있는 모든 하위클래스로 객체가 만들어졌을때 그 객체를 바인딩하기 위한 용도
		//상속관계로 구성된 모든 하위객체를 연결할 수 있음
		//보통 함수의 파라미터로 많이 사용함
//		확장된 부분에서 접근하는 용도
//		업캐스팅된 상태에서 확장된 부분에 접근하기 위해 다운캐스팅을 사용함
//		업캐스팅으로 상속관계에 있는 객체들을 연결시켜주고 개별 객체의 확장 부분에 접근하기 위해 다운캐스팅을 사용함
//		업캐스팅과 다운캐스팅은 함께 사용하는 경우가 많음
		Super ob3 = new Sub(); //상위클래스로 연결하면 상위클래스가 알고 있는 곳까지만 접근 가능
		//Super : 시작 주소로부터 미치는 범위를 뜻함
		ob3.n1 = 100;
//		ob3.n2 = 200; //n2에는 접근 불가능함
		Super ob4 = ob2;
		ob4.n1 = 200;
		
		
		//DownCasting(하위클래스 참조변수 = 상위클래스형 객체)(강제형변환)
//		Sub ob5 = (Sub)ob1; //하위클래스를 상위클래스형 객체로 연결
//		//실제 없는 공간에 다운캐스팅을 하려고 하니 문제가 발생
		//업케스팅 전제가 아니기에
//		ob5.n1=100; //실제 있는 n1 공간에 값 대입(문제X)
//		ob5.n2=200;
		
		//업캐스팅 후 다운캐스팅
		Sub down = (Sub)ob4; //Upcasting을 전제로 한 Downcasting
		//실제 ob4가 연결하고 있는 대상은 Sub
		down.n1 = 1000;
		down.n2 = 2000;
		
		
		//다운캐스팅에서는 instanceOf로 어떤 클래스형인지 구별을 함
		//업캐스팅은 혼자 쓰이는 경우도 있지만 다운캐스팅은 업캐스팅을 전제로 사용함!
		
		
		
	}

}
